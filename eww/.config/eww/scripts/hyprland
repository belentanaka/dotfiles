#!/usr/bin/env python3

import json
import os
import socket
import sys
from subprocess import check_output

USAGE = f"Usage: {sys.argv[0]} {{window|workspaces}}"

def error(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)

def output_win():
    """
    Outputs a string containing the title of the currently active hyprland
    window.
    """

    active_win = json.loads(check_output(['hyprctl', '-j', 'activewindow']))

    if not active_win:
        print('', flush=True)
    else:
        print(active_win['title'], flush=True)

def output_ws():
    """
    Outputs an array of JSON objects. Each object represents a hyprland
    workspace.

    Object structure:
        {name, active}
    """

    ws_list = json.loads(check_output(['hyprctl', '-j', 'workspaces']))
    active_ws = json.loads(check_output(['hyprctl', '-j', 'activeworkspace']))

    output = []
    for w in sorted(ws_list, key=lambda d: d['id']):
        current = {
            'name': w['name'],
            'active': w['id'] == active_ws['id']
        }
        output.append(current)

    print(json.dumps(output), flush=True)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        error(USAGE)

    cmd = sys.argv[1]
    match cmd:
        case 'window':
            output = output_win
            events = {'workspace',
                      'createworkspace',
                      'destroyworkspace',
                      'activewindow',
                      'openwindow',
                      'closewindow'}
        case 'workspaces':
            output = output_ws
            events = {'workspace',
                      'createworkspace',
                      'destroyworkspace'}
        case _:
            error(USAGE)

    # Get HIS environment variable
    HIS = os.environ.get('HYPRLAND_INSTANCE_SIGNATURE')
    if not HIS:
        error("Error: $HYPRLAND_INSTANCE_SIGNATURE is not set")
    sock_addr = f"/tmp/hypr/{HIS}/.socket2.sock"

    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as sock, \
         sock.makefile() as sock_file:
        sock.connect(sock_addr)
        output()
        while True:
            line = sock_file.readline()
            event, data = line.split('>>')
            if event in events:
                output()
